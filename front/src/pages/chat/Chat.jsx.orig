import ChatTextBox from '../../components/chat-text-box/ChatTextBox';
import { useState, useRef, useEffect, useCallback } from 'react';
import { useLocation } from 'react-router-dom';
<<<<<<< HEAD
import styles from './chat.module.css';

function Chat() {
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState([]);
    const location = useLocation();
    const userInput = location.state?.userInput || {};
    const [messages, setMessages] = useState([
=======
import { sendMessageToChatbot } from '../../api/chatApi';
import './chat.css';

function Chat() {
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState('');
  const location = useLocation();
  const [messages, setMessages] = useState([]);
  const bottomRef = useRef(null);
  const firstMessageSentRef = useRef(false);

  const addNewMessage = useCallback((userMessage, sender = 'user') => {
    setMessages((prevMessage) => {
      const updatedMessage = [
        ...prevMessage,
>>>>>>> origin/master
        {
            sender: 'user',
            text: '' + userInput,
        },
    ]);
    const bottomRef = useRef(null);

    const addNewMessage = useCallback((userMessage, sender = 'user') => {
        setMessages((prevMessage) => {
            const updatedMessage = [
                ...prevMessage,
                {
                    sender: sender,
                    text: userMessage,
                },
            ];

<<<<<<< HEAD
            return updatedMessage;
        });
    }, []);

    const handleSendMessage = useCallback(
        async (userMessage) => {
            addNewMessage(userMessage);
            setIsLoading(true);

            try {
                // Retrieve user details from local storage
                // const userDetails = localStorage.getItem('userDetails');
                // if (!userDetails) {
                //     throw new Error('User details not found in local storage');
                // }
=======
  const handleSendMessage = useCallback(
    async (userMessage) => {
      addNewMessage(userMessage, 'user');
      setIsLoading(true);
      try {
        const response = await sendMessageToChatbot(userMessage);
        const chatAnswer = response.ai_reply;

        addNewMessage(chatAnswer, 'bot');
        setIsLoading(false);
      } catch (error) {
        setIsLoading(false);
        setErrors(error.message);
      }
    },
    [addNewMessage]
  );
  useEffect(() => {
    const firstUserMessage = location.state?.userInput;

    if (firstUserMessage && !firstMessageSentRef.current) {
      handleSendMessage(firstUserMessage);
      firstMessageSentRef.current = true;
    }
  }, [handleSendMessage, location.state]);
>>>>>>> origin/master

                // Parse the user details
                // const parsedUserDetails = JSON.parse(userDetails);

<<<<<<< HEAD
                // Log the user ID for debugging
                // console.log('User ID:', parsedUserDetails.sub);

                const response = await fetch('http://localhost:3000/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: userMessage,
                        // userID: parsedUserDetails.sub,
                    }),
                });

                const data = await response.json();
                console.log('Server Response:', data.message);

                addNewMessage(data.message, 'bot');
                setIsLoading(false);
            } catch (error) {
                setIsLoading(false);
                setErrors((prevErrors) => [...prevErrors, error.message]);
                console.error('Error:', error);
            }
        },
        [addNewMessage]
    );

    useEffect(() => {
        bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    return (
        <div className={styles['chat-container-chat-page']}>
            {messages.length > 0 && (
                <ul className={styles['messages-list']}>
                    {messages.map((message, index) => {
                        const listItem = (
                            <li
                                key={index}
                                className={`${styles['message']} ${
                                    styles[message.sender]
                                }`}
                            >
                                {message.text}
                            </li>
                        );
                        return listItem;
                    })}
                    {isLoading && (
                        <li
                            className={`${styles['message']} ${styles['bot']} ${styles['loading-message']}`}
                        >
                            ⏳ Ready for Takeoff...
                            <p>The message is on its way</p>
                        </li>
                    )}
                    <div ref={bottomRef}></div>
                </ul>
            )}
            <div className={styles['chat-text-box-container']}>
                <ChatTextBox onSendMessage={handleSendMessage} />
            </div>
        </div>
    );
=======
  return (
    <div className="chat-container-chat-page">
      {messages.length > 0 && (
        <ul className="messages-list">
          {messages.map((message, index) => {
            const listItem = (
              <li key={index} className={`message ${message.sender}`}>
                {message.text}
              </li>
            );
            return listItem;
          })}
          {isLoading && (
            <li className="message bot loading-message">
              ⏳ המטוס ממריא...<p>ההודעה בדרך אליך</p>
            </li>
          )}
          {errors.length > 0 && (
            <li className="message bot error-message">
              <p>שגיאה: {errors}</p>
            </li>
          )}

          <div ref={bottomRef}></div>
        </ul>
      )}
      <div className="chat-text-box-container">
        <ChatTextBox onSendMessage={handleSendMessage} />
      </div>
    </div>
  );
>>>>>>> origin/master
}

export default Chat;
